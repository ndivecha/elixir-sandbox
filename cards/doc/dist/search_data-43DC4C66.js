searchData={"items":[{"type":"module","title":"Cards","doc":"Documentation for `Cards`.\nProvides methods for creating and handling a deck of cards.","ref":"Cards.html"},{"type":"function","title":"Cards.contains?/2","doc":"Asking a question(?) returns True or False","ref":"Cards.html#contains?/2"},{"type":"function","title":"Cards.create_deck/0","doc":"Function to create deck of cards.\nReturns a list of strings representing a deck of playing cards.","ref":"Cards.html#create_deck/0"},{"type":"function","title":"Cards.create_hand/1","doc":"Function which creates the deck, shuffles, and deals it.\nUsing Pipe operator |>","ref":"Cards.html#create_hand/1"},{"type":"function","title":"Cards.deal/2","doc":"Takes two argument and returns new list\ndeck of card\ndeal number - how many cards you want\nUsing Enum.split()\nDivides a deck into hand and the reminder of the deck.\nThe `hand_size` argument indicates how many cards should\nbe in the hand.","ref":"Cards.html#deal/2"},{"type":"function","title":"Examples - Cards.deal/2","doc":"iex> deck = Cards.create_deck()\n    iex> {hand, deck} = Cards.deal(deck, 1)\n    iex> hand\n    [\"Ace of Spades\"]","ref":"Cards.html#deal/2-examples"},{"type":"function","title":"Cards.hello/0","doc":"Hello world.\nThis is how we start learning Elixir.","ref":"Cards.html#hello/0"},{"type":"function","title":"Cards.load/1","doc":"To open the file\n:ok means atom - they are strings\n:error\n_reason - we understand but we dont want to use it.","ref":"Cards.html#load/1"},{"type":"function","title":"Cards.save/2","doc":"To save the deck of cards to file\nHere we use erlang by passing the deck and filename to store binary object.\ndeck = Cards.create_deck()\nCards.save(deck, \"my_deck\")","ref":"Cards.html#save/2"},{"type":"function","title":"Cards.shuffle/1","doc":"Shuffle function to shuffle card deck and returns new list","ref":"Cards.html#shuffle/1"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.37.3"}}